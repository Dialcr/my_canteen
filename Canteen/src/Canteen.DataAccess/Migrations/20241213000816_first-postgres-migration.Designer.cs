// <auto-generated />
using System;
using Canteen.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Canteen.DataAccess.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20241213000816_first-postgres-migration")]
    partial class firstpostgresmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Canteen.DataAccess.Entities.CanteenCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DeliveryTotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DeliveryTotalDiscount")
                        .HasColumnType("numeric");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrductsTotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProductTotalDiscount")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.CanteenRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DeliveryAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("DeliveryTimeId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("DeliveryTimeId");

                    b.HasIndex("OrderId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.DeliveryTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryTimeType")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("DeliveryTimes");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.DietaryRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DietaryRestriction");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountDecimal")
                        .HasColumnType("numeric");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalNecesity")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Establishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Establishments");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.KeyValueData", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("KeyValueData");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.MenuProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CanteenProductId")
                        .HasColumnType("integer");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CanteenProductId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuProducts");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DeliveryTotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DeliveryTotalDiscount")
                        .HasColumnType("numeric");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrductsTotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ProductTotalDiscount")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("EstablishmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EstablishmentId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.ProductImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImageUrls");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.RequestProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestProducts");
                });

            modelBuilder.Entity("DietaryRestrictionProduct", b =>
                {
                    b.Property<int>("DietaryRestrictionsId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductsId")
                        .HasColumnType("integer");

                    b.HasKey("DietaryRestrictionsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("DietaryRestrictionProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.CanteenCart", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Establishment", "Establishment")
                        .WithMany()
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.CanteenRequest", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.CanteenCart", "Cart")
                        .WithMany("Requests")
                        .HasForeignKey("CartId");

                    b.HasOne("Canteen.DataAccess.Entities.DeliveryTime", "DeliveryTime")
                        .WithMany()
                        .HasForeignKey("DeliveryTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Canteen.DataAccess.Entities.Order", "Order")
                        .WithMany("Requests")
                        .HasForeignKey("OrderId");

                    b.Navigation("Cart");

                    b.Navigation("DeliveryTime");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.DeliveryTime", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Establishment", "Establishment")
                        .WithMany("DeliveryTimes")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Discount", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Establishment", "Establishment")
                        .WithMany("Discounts")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Menu", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Establishment", "Establishment")
                        .WithMany("Menus")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.MenuProduct", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("CanteenProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Canteen.DataAccess.Entities.Menu", "Menu")
                        .WithMany("MenuProducts")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Order", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Establishment", "Establishment")
                        .WithMany("Orders")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Product", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Establishment", "Establishment")
                        .WithMany("Products")
                        .HasForeignKey("EstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Establishment");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.ProductImageUrl", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Product", null)
                        .WithMany("ImagesUrl")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.RequestProduct", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Canteen.DataAccess.Entities.CanteenRequest", "CanteenRequest")
                        .WithMany("RequestProducts")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CanteenRequest");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DietaryRestrictionProduct", b =>
                {
                    b.HasOne("Canteen.DataAccess.Entities.DietaryRestriction", null)
                        .WithMany()
                        .HasForeignKey("DietaryRestrictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Canteen.DataAccess.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.CanteenCart", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.CanteenRequest", b =>
                {
                    b.Navigation("RequestProducts");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Establishment", b =>
                {
                    b.Navigation("DeliveryTimes");

                    b.Navigation("Discounts");

                    b.Navigation("Menus");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Menu", b =>
                {
                    b.Navigation("MenuProducts");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Order", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Canteen.DataAccess.Entities.Product", b =>
                {
                    b.Navigation("ImagesUrl");
                });
#pragma warning restore 612, 618
        }
    }
}
